cliconfig:
  url: "ldap://ldap:1389"
  passwordfile: "config/passfile"
  base: "dc=example,dc=org"
  user: "admin"
  ldapstls:
    cafile: "/config/ca.crt"
    crtfile: "/config/ldap.crt"
    crtkeyfile: "/config/ldap.key"
  awsconfig:
    network:
      vpcname: demo.VPC
      subnetname: demo.VPC-private
      sgmanager: manager
    az: a
    instancetype: t3.medium
    region: us-east-1
    imageid: ami-053b0d53c279acc90
    userdata: |
      #!/bin/bash
      apt-get update
      #curl -sfL https://get.docker.com | sh -
      cd /root
      wget https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/docker-ce-cli_19.03.15~3-0~ubuntu-bionic_amd64.deb \
        https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/docker-ce_19.03.15~3-0~ubuntu-bionic_amd64.deb \
        https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64/containerd.io_1.3.9-1_amd64.deb
      dpkg -i containerd.io_1.3.9-1_amd64.deb docker-ce-cli_19.03.0~3-0~ubuntu-bionic_amd64.deb docker-ce-cli_19.03.15~3-0~ubuntu-bionic_amd64.deb docker-ce_19.03.15~3-0~ubuntu-bionic_amd64.deb
      curl -sfL https://get.k3s.io | sh -
      mkdir ~/.kube
      cat /etc/rancher/k3s/k3s.yaml >~/.kube/config
      apt-get install -y xfce4 sssd xrdp git python3-pip docker-compose sssd-ldap ldap-utils sssd-tools ca-certificates
      mkdir -p /etc/sssd/certs
      cat >/etc/sssd/certs/ca.crt << 'EOF'
      ${CA.CRT}
      EOF
      cat >/etc/sssd/sssd.conf << 'EOF'
      [sssd]
      services = nss, pam
      config_file_version = 2
      domains = workshop

      [nss]
      homedir_substring = /home

      [pam]
      offline_credentials_expiration = 60

      [domain/workshop]
      cache_credentials = True
      id_provider = ldap
      auth_provider = ldap
      chpass_provider = ldap
      access_provider = ldap
      ldap_uri = ldaps://manager.workshop:1686
      ldap_search_base = ou=users,dc=example,dc=org
      ldap_default_bind_dn = cn=admin,dc=example,dc=org
      ldap_default_authtok = ${PASSWORD}
      ldap_access_filter = (objectClass=posixAccount)
      ldap_access_order = filter
      ldap_schema = rfc2307bis
      ldap_tls_reqcert = allow
      ldap_tls_cacert = /etc/sssd/certs/ca.crt
      EOF
      chmod 600 -R /etc/sssd
      chown -R root: /etc/sssd
      sssctl config-check
      systemctl restart sssd
      systemctl enable sssd
      pam-auth-update --enable mkhomedir
      addgroup ${USER} sudo
      cd /root
      git clone https://github.com/aescanero/opensouthcode-workshop-2023
      git clone https://github.com/aescanero/opensouthcode-workshop-2023-exercices
      #Install the utilities in host
      #Install all the utilities in docker
      docker pull r.j3ss.co/amicontained:v0.4.9
      pip3 install -U checkov
      curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      curl -fsSL https://downloads.k8slens.dev/keys/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/lens-archive-keyring.gpg > /dev/null
      echo "deb [arch=amd64 signed-by=/usr/share/keyrings/lens-archive-keyring.gpg] https://downloads.k8slens.dev/apt/debian stable main" | sudo tee /etc/apt/sources.list.d/lens.list > /dev/null
      sudo apt update
      sudo apt install lens
      sudo apt-get install wget apt-transport-https gnupg lsb-release
      wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
      sudo apt-get update
      sudo apt-get install trivy
      curl -s https://falco.org/repo/falcosecurity-packages.asc | sudo apt-key add -
      echo "deb https://download.falco.org/packages/deb stable main" | \
      tee /etc/apt/sources.list.d/falcosecurity.list
      apt-get update
      apt install -y dkms make linux-headers-$(uname -r)
      apt install -y clang llvm
      apt install -y dialog
      FALCO_FRONTEND=noninteractive apt-get install -y falco
      systemctl mask falcoctl-artifact-follow.service
      falco-driver-loader bpf
      systemctl enable falco-bpf.service
      systemctl start falco-bpf.service
      apt-get install apparmor-utils -y

      #Install all the utilities in kubernetes
      curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
      sudo apt-get install apt-transport-https --yes
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
      sudo apt-get update
      sudo apt-get install helm
      helm repo add influxdata https://helm.influxdata.com/
      helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      helm repo add jetstack https://charts.jetstack.io
      helm repo add istio https://istio-release.storage.googleapis.com/charts
      helm repo add cilium https://helm.cilium.io
      helm repo update
      kubectl create ns monitoring
      kubectl create ns cert-manager
      kubectl create ns microservices
      kubectl create ns istio
      kubectl create ns wordpress
      kubectl create ns test
      kubectl -n monitoring create secret generic influxdb-auth --from-literal admin-password=${PASSWORD} --from-literal admin-token=e37f514785d14ddef10c9e1c06bfb4c347fca00eee7f8797ff717a764bdd4b60
      cd opensouthcode-workshop-2023/docker/deployments
      sh cert-manager.sh
      sh influxdb.sh
      sh prometheus.sh
      sh tetragon.sh
      cd telegraf && docker-compose up -d

      apt-get install -y unzip
      curl -OsL https://github.com/int128/kubelogin/releases/download/v1.27.0/kubelogin_linux_amd64.zip
      unzip kubelogin_linux_amd64.zip kubelogin
      rm -f kubelogin_linux_amd64.zip
      mv kubelogin /usr/local/bin/kubectl-oidc_login
      sudo apt-get install chromium-browser






